<!DOCTYPE html>
<html>
  <head>
    <title>Jmol Contact/Docking Example Page</title>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <script>
/*--------------------------------------------------|
| dTree 2.05 | www.destroydrop.com/javascript/tree/ |
|---------------------------------------------------|
| Copyright (c) 2002-2003 Geir Landr~               |
|                                                   |
| This script can be used freely as long as all     |
| copyright messages are intact.                    |
|                                                   |
| Updated: 17.04.2003                               |
|--------------------------------------------------*/

// Node object
function Node(id, pid, name, url, title, target, icon, iconOpen, open) {
	this.id = id;
	this.pid = pid;
	this.name = name;
	this.url = url;
	this.title = title;
	this.target = target;
	this.icon = icon;
	this.iconOpen = iconOpen;
	this._io = open || false;
	this._is = false;
	this._ls = false;
	this._hc = false;
	this._ai = 0;
	this._p;
};

// Tree object
function dTree(objName) {
	this.config = {
		target					: null,
		folderLinks			: true,
		useSelection		: true,
		useCookies			: true,
		useLines				: true,
		useIcons				: true,
		useStatusText		: false,
		closeSameLevel	: false,
		inOrder					: false
	}
	this.icon = {
		root				: 'small.png',
		folder			: 'small.png',
		folderOpen	: 'small.png',
		node				: 'small.png',
		empty				: 'small.png',
		line				: 'img/line.gif',
		join				: 'img/join.gif',
		joinBottom	: 'img/joinbottom.gif',
		plus				: 'img/plus.gif',
		plusBottom	: 'img/plusbottom.gif',
		minus				: 'img/minus.gif',
		minusBottom	: 'img/minusbottom.gif',
		nlPlus			: 'img/nolines_plus.gif',
		nlMinus			: 'img/nolines_minus.gif'
	};
	this.obj = objName;
	this.aNodes = [];
	this.aIndent = [];
	this.root = new Node(-1);
	this.selectedNode = null;
	this.selectedFound = false;
	this.completed = false;
};

// Adds a new node to the node array
dTree.prototype.add = function(id, pid, name, url, title, target, icon, iconOpen, open) {
	this.aNodes[this.aNodes.length] = new Node(id, pid, name, url, title, target, icon, iconOpen, open);
};

// Open/close all nodes
dTree.prototype.openAll = function() {
	this.oAll(true);
};
dTree.prototype.closeAll = function() {
	this.oAll(false);
};

// Outputs the tree to the page
dTree.prototype.toString = function() {
	var str = '<div class="dtree">\n';
	if (document.getElementById) {
		if (this.config.useCookies) this.selectedNode = this.getSelected();
		str += this.addNode(this.root);
	} else str += 'Browser not supported.';
	str += '</div>';
	if (!this.selectedFound) this.selectedNode = null;
	this.completed = true;
	return str;
};

// Creates the tree structure
dTree.prototype.addNode = function(pNode) {
	var str = '';
	var n=0;
	if (this.config.inOrder) n = pNode._ai;
	for (n; n<this.aNodes.length; n++) {
		if (this.aNodes[n].pid == pNode.id) {
			var cn = this.aNodes[n];
			cn._p = pNode;
			cn._ai = n;
			this.setCS(cn);
			if (!cn.target && this.config.target) cn.target = this.config.target;
			if (cn._hc && !cn._io && this.config.useCookies) cn._io = this.isOpen(cn.id);
			if (!this.config.folderLinks && cn._hc) cn.url = null;
			if (this.config.useSelection && cn.id == this.selectedNode && !this.selectedFound) {
					cn._is = true;
					this.selectedNode = n;
					this.selectedFound = true;
			}
			str += this.node(cn, n);
			if (cn._ls) break;
		}
	}
	return str;
};

// Creates the node icon, url and text
dTree.prototype.node = function(node, nodeId) {
	var str = '<div class="dTreeNode">' + this.indent(node, nodeId);
	if (this.config.useIcons) {
		if (!node.icon) node.icon = (this.root.id == node.pid) ? this.icon.root : ((node._hc) ? this.icon.folder : this.icon.node);
		if (!node.iconOpen) node.iconOpen = (node._hc) ? this.icon.folderOpen : this.icon.node;
		if (this.root.id == node.pid) {
			node.icon = this.icon.root;
			node.iconOpen = this.icon.root;
		}
		str += '<img id="i' + this.obj + nodeId + '" src="' + ((node._io) ? node.iconOpen : node.icon) + '" alt="" />';
	}
// 	if (node.url) {
// 		str += '<a id="s' + this.obj + nodeId + '" class="' + ((this.config.useSelection) ? ((node._is ? 'nodeSel' : 'node')) : 'node') + '" href="' + node.url + '"';
// 		if (node.title) str += ' title="' + node.title + '"';
// 		if (node.target) str += ' target="' + node.target + '"';
// 		if (this.config.useStatusText) str += ' onmouseover="window.status=\'' + node.name + '\';return true;" onmouseout="window.status=\'\';return true;" ';
// 		if (this.config.useSelection && ((node._hc && this.config.folderLinks) || !node._hc))
// 			str += ' onclick="javascript: ' + this.obj + '.s(' + nodeId + ');"';
// 		str += '>';
// 	}
	//else if ((!this.config.folderLinks || !node.url) && node._hc && node.pid != this.root.id)
//		str += '<a href="javascript: ' + this.obj + '.o(' + nodeId + ');" class="node">';
	str += node.name;
//	if (node.url || ((!this.config.folderLinks || !node.url) && node._hc)) str += '</a>';
	str += '</div>';
	if (node._hc) {
		str += '<div id="d' + this.obj + nodeId + '" class="clip" style="display:' + ((this.root.id == node.pid || node._io) ? 'block' : 'none') + ';">';
		str += this.addNode(node);
		str += '</div>';
	}
	this.aIndent.pop();
	return str;
};

// Adds the empty and line icons
dTree.prototype.indent = function(node, nodeId) {
	var str = '';
	if (this.root.id != node.pid) {
		for (var n=0; n<this.aIndent.length; n++)
			str += '<img src="' + ( (this.aIndent[n] == 1 && this.config.useLines) ? this.icon.line : this.icon.empty ) + '" alt="" />';
		(node._ls) ? this.aIndent.push(0) : this.aIndent.push(1);
		if (node._hc) {
			str += '<a href="javascript: ' + this.obj + '.o(' + nodeId + ');"><img border="none" id="j' + this.obj + nodeId + '" src="';
			if (!this.config.useLines) str += (node._io) ? this.icon.nlMinus : this.icon.nlPlus;
			else str += ( (node._io) ? ((node._ls && this.config.useLines) ? this.icon.minusBottom : this.icon.minus) : ((node._ls && this.config.useLines) ? this.icon.plusBottom : this.icon.plus ) );
			str += '" alt="" /></a>';
		} else str += '<img src="' + ( (this.config.useLines) ? ((node._ls) ? this.icon.joinBottom : this.icon.join ) : this.icon.empty) + '" alt="" />';
	}
	return str;
};

// Checks if a node has any children and if it is the last sibling
dTree.prototype.setCS = function(node) {
	var lastId;
	for (var n=0; n<this.aNodes.length; n++) {
		if (this.aNodes[n].pid == node.id) node._hc = true;
		if (this.aNodes[n].pid == node.pid) lastId = this.aNodes[n].id;
	}
	if (lastId==node.id) node._ls = true;
};

// Returns the selected node
dTree.prototype.getSelected = function() {
	var sn = this.getCookie('cs' + this.obj);
	return (sn) ? sn : null;
};

// Highlights the selected node
dTree.prototype.s = function(id) {
	if (!this.config.useSelection) return;
	var cn = this.aNodes[id];
	if (cn._hc && !this.config.folderLinks) return;
	if (this.selectedNode != id) {
		if (this.selectedNode || this.selectedNode==0) {
			eOld = document.getElementById("s" + this.obj + this.selectedNode);
			eOld.className = "node";
		}
		eNew = document.getElementById("s" + this.obj + id);
		eNew.className = "nodeSel";
		this.selectedNode = id;
		if (this.config.useCookies) this.setCookie('cs' + this.obj, cn.id);
	}
};

// Toggle Open or close
dTree.prototype.o = function(id) {
	var cn = this.aNodes[id];
	this.nodeStatus(!cn._io, id, cn._ls);
	cn._io = !cn._io;
	if (this.config.closeSameLevel) this.closeLevel(cn);
	if (this.config.useCookies) this.updateCookie();
};

// Open or close all nodes
dTree.prototype.oAll = function(status) {
	for (var n=0; n<this.aNodes.length; n++) {
		if (this.aNodes[n]._hc && this.aNodes[n].pid != this.root.id) {
			this.nodeStatus(status, n, this.aNodes[n]._ls)
			this.aNodes[n]._io = status;
		}
	}
	if (this.config.useCookies) this.updateCookie();
};

// Opens the tree to a specific node
dTree.prototype.openTo = function(nId, bSelect, bFirst) {
	if (!bFirst) {
		for (var n=0; n<this.aNodes.length; n++) {
			if (this.aNodes[n].id == nId) {
				nId=n;
				break;
			}
		}
	}
	var cn=this.aNodes[nId];
	if (cn.pid==this.root.id || !cn._p) return;
	cn._io = true;
	cn._is = bSelect;
	if (this.completed && cn._hc) this.nodeStatus(true, cn._ai, cn._ls);
	if (this.completed && bSelect) this.s(cn._ai);
	else if (bSelect) this._sn=cn._ai;
	this.openTo(cn._p._ai, false, true);
};

// Closes all nodes on the same level as certain node
dTree.prototype.closeLevel = function(node) {
	for (var n=0; n<this.aNodes.length; n++) {
		if (this.aNodes[n].pid == node.pid && this.aNodes[n].id != node.id && this.aNodes[n]._hc) {
			this.nodeStatus(false, n, this.aNodes[n]._ls);
			this.aNodes[n]._io = false;
			this.closeAllChildren(this.aNodes[n]);
		}
	}
}

// Closes all children of a node
dTree.prototype.closeAllChildren = function(node) {
	for (var n=0; n<this.aNodes.length; n++) {
		if (this.aNodes[n].pid == node.id && this.aNodes[n]._hc) {
			if (this.aNodes[n]._io) this.nodeStatus(false, n, this.aNodes[n]._ls);
			this.aNodes[n]._io = false;
			this.closeAllChildren(this.aNodes[n]);		
		}
	}
}

// Change the status of a node(open or closed)
dTree.prototype.nodeStatus = function(status, id, bottom) {
	eDiv	= document.getElementById('d' + this.obj + id);
	eJoin	= document.getElementById('j' + this.obj + id);
	if (this.config.useIcons) {
		eIcon	= document.getElementById('i' + this.obj + id);
		eIcon.src = (status) ? this.aNodes[id].iconOpen : this.aNodes[id].icon;
	}
	eJoin.src = (this.config.useLines)?
	((status)?((bottom)?this.icon.minusBottom:this.icon.minus):((bottom)?this.icon.plusBottom:this.icon.plus)):
	((status)?this.icon.nlMinus:this.icon.nlPlus);
	eDiv.style.display = (status) ? 'block': 'none';
};


// [Cookie] Clears a cookie
dTree.prototype.clearCookie = function() {
	var now = new Date();
	var yesterday = new Date(now.getTime() - 1000 * 60 * 60 * 24);
	this.setCookie('co'+this.obj, 'cookieValue', yesterday);
	this.setCookie('cs'+this.obj, 'cookieValue', yesterday);
};

// [Cookie] Sets value in a cookie
dTree.prototype.setCookie = function(cookieName, cookieValue, expires, path, domain, secure) {
	document.cookie =
		escape(cookieName) + '=' + escape(cookieValue)
		+ (expires ? '; expires=' + expires.toGMTString() : '')
		+ (path ? '; path=' + path : '')
		+ (domain ? '; domain=' + domain : '')
		+ (secure ? '; secure' : '');
};

// [Cookie] Gets a value from a cookie
dTree.prototype.getCookie = function(cookieName) {
	var cookieValue = '';
	var posName = document.cookie.indexOf(escape(cookieName) + '=');
	if (posName != -1) {
		var posValue = posName + (escape(cookieName) + '=').length;
		var endPos = document.cookie.indexOf(';', posValue);
		if (endPos != -1) cookieValue = unescape(document.cookie.substring(posValue, endPos));
		else cookieValue = unescape(document.cookie.substring(posValue));
	}
	return (cookieValue);
};

// [Cookie] Returns ids of open nodes as a string
dTree.prototype.updateCookie = function() {
	var str = '';
	for (var n=0; n<this.aNodes.length; n++) {
		if (this.aNodes[n]._io && this.aNodes[n].pid != this.root.id) {
			if (str) str += '.';
			str += this.aNodes[n].id;
		}
	}
	this.setCookie('co' + this.obj, str);
};

// [Cookie] Checks if a node id is in a cookie
dTree.prototype.isOpen = function(id) {
	var aOpen = this.getCookie('co' + this.obj).split('.');
	for (var n=0; n<aOpen.length; n++)
		if (aOpen[n] == id) return true;
	return false;
};

// If Push and pop is not implemented by the browser
if (!Array.prototype.push) {
	Array.prototype.push = function array_push() {
		for(var i=0;i<arguments.length;i++)
			this[this.length]=arguments[i];
		return this.length;
	}
};
if (!Array.prototype.pop) {
	Array.prototype.pop = function array_pop() {
		lastElement = this[this.length-1];
		this.length = Math.max(this.length-1,0);
		return lastElement;
	}
};
</script>

    <script type="text/javascript" src="JSmol.min.js"></script>
    <script type="text/javascript" src="js/Jmol2.js"></script>
    <style type="text/css">
    #a:link {color:#000000;} a:visited {color:#000000;} a:hover {color:#000000;} a:active {color:#000000;} a {text-decoration:none}
    h1{
      font-weight:bold;
      font-size:150%;
      text-align:center;
    } 
    </style>
    <script type="text/javascript">

    function jmolScript(s) {
    Jmol.script(jmolApplet0, s);
    
    }


      practicePdb = "1eve"
      counter=0;
      treelist=[];
      molecules=[];
      script = ""
      jmolInitialize(".","JmolAppletSigned0.jar")



var MOUSE_UP = 5;


      function onclickJmol(a,b,c,d,e,timeMode) {
        if (thisMode == DOCKING && timeMode[1] == MOUSE_UP)
          updateContacts();        
      }

      function addApplet() {
                      var xxxx = document.location.search
                      if(xxxx.length == 0) {
                        script = 'set CLICKcallback "onclickJmol";set animframecallback "jmolscript:if (!selectionHalos) {select model=_modelNumber}";'
                      	+'set errorCallback "myCallback";'
                      	+'set zoomlarge false;set echo top left;echo loading 1eve...;refresh;'
                        +'set pdbaddhydrogens;'
                      	+'load "=1eve.mmtf";set echo top center;echo 1eve;'
                      } else if (xxxx.length == 5)  {
                      	xxxx = (xxxx + "?1eve").substring(1,5)
                      	script = 'set animframecallback "jmolscript:if (!selectionHalos) {select model=_modelNumber}";'
                      	+'set errorCallback "myCallback";'
                      	+'set zoomlarge false;set echo top left;echo loading XXXX...;refresh;'
                      	+'set pdbaddhydrogens;'
                        +'load "=XXXX";set echo top center;echo XXXX;'  
                      	script = script.replace(/XXXX/g, xxxx)
                      } else {
                      	script = unescape(xxxx.substring(1))
                      }
                      script += "select protein||dna||rna; cartoons only; color structure;"
                      jmolApplet(["500","500"],"set loadStructCallBack 'onloadjmol';" + script)
      }

      function myCallback(a, b, c, d) {
        alert("myCallback a="+a+" b="+b+" c="+c+" d="+d)
      }

      function parse(input) {
        var temp=input.split("\n");
        for(var i=temp.length-1; i>=0; i--)
        {
          if((temp[i]=="")||(temp[i]==" ")) {
            temp.splice(i,1)
          }
        }
        var namelist=[];var atomlist=[];
        for(var i=0; i<temp.length; i++) {
          namelist[i]="Chain "+temp[i];
          atomlist[i]=":"+temp[i];
        }
        return [namelist,atomlist]
      }

      function onloadjmol(a,b,c,d,e) {
          jmolScript("atomPositions = {ligand}.xyz.all;select protein||dna||rna; cartoons only; color structure;");
          molecules=[];          
          var i=0;
          var parsed=parse(jmolEvaluate("script(' select RNA; show chains')"))
          if(parsed[0].length!=0) molecules[i++]=["RNA",parsed[0],parsed[1]]
          parsed=parse(jmolEvaluate("script(' select DNA; show chains')"))
          if(parsed[0].length!=0) molecules[i++]=["DNA",parsed[0],parsed[1]]
          parsed=parse(jmolEvaluate("script(' select protein; show chains')"))
          if(parsed[0].length!=0) molecules[i++]=["Protein",parsed[0],parsed[1]]
          var temp=jmolGetPropertyAsArray("ligandinfo.ligands");
          for(var j=temp.length-1; j>=0; j--)
          {
            if((temp[j].atoms.search("}")!=-1)&&(temp[j].atoms.search(/\d:\d/)==-1)) {
              temp.splice(j,1)
            } else {
              if(temp[j].groupNames.length>11) {
                temp[j].groupNames=temp[j].groupNames.substr(0,11);
              }
              temp[j].groupNames="["+temp[j].groupNames+"]"+temp[j].residueList;
              if(temp[j].groupNames.length>19) {
                temp[j].groupNames=temp[j].groupNames.replace("]","]<br>");
              }
            }
          }
          if(temp.length!=0)
          {
            molecules[i]=["Ligands",[],[]]
            var lig="";
            for(var j=0; j<temp.length; j++) {
              molecules[i][1][j]=temp[j].groupNames;
              molecules[i][2][j]=temp[j].atoms;
              lig+=temp[j].atoms+"||"
            }
            lig=lig.substr(0,lig.length-2);
            for(var j=0; j<i-1; j++) {
              for(k=0; k<molecules[j][2].length; k++) {
                molecules[j][2][k]+="&&(DNA||RNA||protein)"
              }
            }
          }
          document.getElementById("rightboxes").innerHTML=maketree(2,"doSelection();flash(2)");
          setDivs()
          left(0);
      }


var CONTACT = 0;
var DOCKING = 1;
var STYLE = 2;

var thisMode = CONTACT;

      function left(which) {
        thisMode = which;
        jmolScript("!timeout off; set picking on;")
        document.getElementById("left_contact").style.display=(which == CONTACT ? "block" : "none")
        document.getElementById("left_docking").style.display=(which == DOCKING ? "block" : "none")
        document.getElementById("left_style").style.display=(which == STYLE ? "block" : "none")
        if (which == DOCKING) {
             startdocking();
        }
      }

      var H = ["Contact", "Docking", "Styles"]

      function getHeader(which, haveLigands) {
        var s = ""
        for (var i = 0; i < 3; i++) 
          if (which != 1 || haveLigands)
            s += (i == 0 ? "" : "/") 
              + (which == i ? H[i] : "<small><a href=javascript:left(" + i + ") style='text-'>" + H[i] + "</a></small>")
        return s
      }

      function setDivs() {
        var M = molecules[molecules.length-1]
        var haveLigands = (M[0]=="Ligands")
        document.getElementById("left_contact_header").innerHTML = getHeader(0, haveLigands)
        document.getElementById("left_docking_header").innerHTML = getHeader(1, haveLigands)
        document.getElementById("left_style_header").innerHTML = getHeader(2, haveLigands)
        document.getElementById("maketree_0").innerHTML = maketree(0,"flash(0)")
        document.getElementById("maketree_1").innerHTML = maketree(1,"flash(1)")
        var s = ""
        if(haveLigands) {
          for(var i=0; i< M[1].length; i++) {
            s+="<label><input " + (i == 0 ? "checked " : "") 
               + "type='radio' name='ligand' id='ligand" + i + "' onclick='startdocking()'/>" 
               + M[1][i]+"</label><br>";
            }
         }
         document.getElementById("docking").innerHTML = s
      }

      function getDockingAtoms() {
        var M = molecules[molecules.length-1]
        for(var i = M[1].length; --i >= 0;)
          if(document.getElementById("ligand"+i).checked)
            return "{" + M[2][i] + "}"
        return ""
      }

      function startdocking() {
        var atoms = getDockingAtoms()
        if (!atoms) return
        var dragType = (document.getElementById("chkMinimize").checked ? "set dragSelected true;set picking dragMinimizeMolecule;" : "set dragSelected false;set picking dragSelected;");
        jmolScript("n=0;a ="+atoms+";fixed !a; select !ligand;wireframe only;color cpk;"
          +"display group within(0.4, vdw, a);" + dragType + " select a; zoomTo {within(group,within(0.4, vdw, a))} 0;spacefill 23%; wireframe 0.15;");
        updateContacts();
      }

      function updateContacts() {
          jmolScript("contact {a} color type;");
      }

      function doButton(params) {
        jmolScript("select " + getSelection(treenum) + ";" + params[1])
      }

      function flash(treenum) {
        jmolScript("select " + getSelection(treenum) + ";selectionhalos on; delay 0.5; selectionhalos off;")
      }

      function rootchecked(treenum) {
        for(var i=0; i<molecules.length; i++) {
          document.getElementById("tree"+treenum+"child"+i).checked=document.getElementById("tree"+treenum+"root").checked
          for(var j=0; j<molecules[i][1].length; j++) {
            document.getElementById("tree"+treenum+"child"+i+"grand"+j).checked=document.getElementById("tree"+treenum+"root").checked
          }          
        }  
      }

      function childchecked(treenum, childnum) {
        for(var j=0; j<molecules[childnum][1].length; j++) {
          document.getElementById("tree"+treenum+"child"+childnum+"grand"+j).checked=document.getElementById("tree"+treenum+"child"+childnum).checked
        }            
      }

      function getSelection(treenum) {
        var selected ="";
        for(var i=0; i<molecules.length; i++) {
          for(var j=0; j<molecules[i][1].length; j++) {
            if(document.getElementById("tree"+treenum+"child"+i+"grand"+j).checked) {
              selected+=molecules[i][2][j]+"||";
            }
          }          
        }
        return selected.substr(0,selected.length-2)
      }

      function doSelection() {
        var selected=getSelection(2);
        if(selected.length!=0) {
          jmolScript("select "+selected);
        } else {
          jmolScript("select none");
        }
      }

      function maketree(treenum, command) {
        treelist[treenum] = new dTree('treelist['+treenum+']');
        treelist[treenum].add(0,-1,"<input type='checkbox' id='tree"+treenum+"root' onclick='rootchecked("+treenum+");"+command+"'/>" +"All");
        var n=molecules.length+1;
        for(var i=0; i<molecules.length; i++) {
          treelist[treenum].add(i+1,0,"<input type='checkbox' id='tree"+treenum+"child"+i+"' onclick='childchecked("+treenum+","+i+");"+command+"'/>" + molecules[i][0]);
          for(var j=0; j<molecules[i][1].length; j++) {
            treelist[treenum].add(n,i+1,"<input type='checkbox' id='tree"+treenum+"child"+i+"grand"+j+"' onclick='"+command+"'/>" + molecules[i][1][j]);
            n++;
          }
        }
        return treelist[treenum];
      }

      pdbid = "1eve";
      
      function loadPdb() {
        var what = prompt('Enter a PDB ID to load',pdbid)
        if (!what) return
        pdbid = what
        jmolScript("try{load =" + what + "}") 
      }

var lastContact = "Planar"
      function Contact(type) {
        if (!type) type = lastContact
        lastContact = type
        var set1=getSelection(0); var set2=getSelection(1);
        if(document.getElementById("All").checked) {
          var category=""
        } else if(document.getElementById("H-Bond").checked) {
          var category="hbond"
        } else if(document.getElementById("Clash").checked) {
          var category="clash"
        } else {
          var category="VDW"
        }
        var color="";
        if(document.getElementById("Color Type").checked) {
          color="color type"
        } 
        if(set1.length==0) {
          var temp=set1;
          set1=set2;
          set2=temp;
        }
        if(set1!="") {
          if (set2!=""){
            var command="contact {"+set1+"&&1.1} {"+set2+"&&1.1} "+category+" "+type+" "+color;
            
          } else {
            var command="contact {"+set1+"&&1.1} "+category+" "+type+" "+color;
          }
          jmolScript(command);
        }
      }

      function focuscontact() {
        var set1=getSelection(0); var set2=getSelection(1);
        if(set1.length==0) {
          var temp=set1;
          set1=set2;
          set2=temp;
        }
        if(set1!=""){
          zshadeoff();
          if (set2!=""){
            var s="alla={"+set1+"};allb={"+set2+"};a={alla&&within(group,within(.25,vdw,allb))};b={allb&&within(group,within(.25,vdw,alla))};display a||b; if({a}.count>{b}.count) {select b; spacefill only; spacefill 23%; wireframe 0.15; select a; wireframe -.1;} else {select a; spacefill only; spacefill 23%; wireframe 0.15; select b; wireframe -.1;} select visible; color cpk; zoomto 1 {visible} 0;";
          } else {
            var s="display groups within(.25,vdw,"+set1+"); select "+set1+"; spacefill only; spacefill 23%; wireframe 0.15; select visible&&!"+set1+"; wireframe -.1; select visible; color cpk; zoomto 1 {visible} 0;";
          }
        }
        jmolScript(s)
        //doSelection();
      }

      function focusdocking() {
        var atoms = getDockingAtoms()
        var s="select "+atoms+";display groups within(.25,vdw,selected); zoomto 1 {visible} 0;";
        jmolScript(s)
        updateContacts();
      }

      function resetPositions() {
        jmolScript('{ligand}.xyz = atomPositions')
        focusdocking()
      }

      function focusselection() {
        var set1=getSelection(2);
        if(set1.length!=0) {
          zshadeon();
          var s="display *; set1={"+set1+"};select !set1; backbone -.1; select set1; spacefill only; spacefill 23%; wireframe 0.15; set zslab {set1}; zoomto 1 {set1} 0";
          jmolScript(s);
          //doSelection();
        }
      }

      function zshadeon() {
        jmolScript("set zshade on")
        document.getElementById("zshade").innerHTML="<input type='button' value='Fade Off' onclick='zshadeoff()'/>"  
      }

      function zshadeoff() {
        jmolScript("set zshade off")
        document.getElementById("zshade").innerHTML="<input type='button' value='Fade On' onclick='zshadeon()'/>"  
      }
    </script>
  </head>
  <body>
    <center>
      <table>
        <tbody>
          <tr>          
            <td width=310 valign=top>  
<div id="left_contact" style="display:none">
            <h1><span id="left_contact_header"></span></h1>
            <table>
              <tr>
                <td colspan=2>
<center>
                  <input type="button" value="Planar" onclick="Contact('planar')" />
                  <input type="button" value="Full" onclick="Contact('full')" />
                  <input type="button" value="Connect" onclick="Contact('connect')" />
                  <input type="button" value="Contact Off" onclick="jmolScript('contact delete')" />
                  <br>
                  <input type="radio" name="category" id="All" checked="true" onclick="Contact()"/> All
                  <input type="radio" name="category" id="H-Bond" onclick="Contact()" /> H-Bond
                  <input type="radio" name="category" id="Clash" onclick="Contact()" /> Clash
                  <input type="radio" name="category" id="VDW" onclick="Contact()" /> VDW
                  <br>
                  <input type="radio" name="color" id="Default" checked="true" onclick="Contact()" /> Default
                  <input type="radio" name="color" id="Color Type" onclick="Contact()" /> Color Type
                  <br>
                  <input type="button" value="Focus on Selected" onclick="focuscontact()" id="contactbutton"/>
                  <input type="button" value="Display All" onclick="jmolScript('display all;zoomTo {visible} 0')"/>
</center>
                </td>
              </tr>
                <tr>
                  <th align=left><br>from...</th><th align=left><br>to...</th>
                </tr>
              <tr>
                <td width=150 align=left valign=top><span id=maketree_0></span></td>
                <td width=150 align=left valign=top><span id=maketree_1></span></td>
              </tr>
            </table>
</div>
<div id="left_docking" style="display:none">
            <h1><span id="left_docking_header"></span></h1>
<center>
            <input type="button" value="Focus on Selected" onclick="focusdocking()" id="focusselection"/>
            <input type="button" value="Display All" onclick="jmolScript('display all;zoom {visible} 0')"/>
            <br>
            <input type="button" value="Reset Positions" onclick="resetPositions()"/>
            <br>
            <input type="radio" name="minimize" id="chkMinimize" onclick="startdocking()" /> with
            <input type="radio" name="minimize" id="chkNoMinimize" checked="true" onclick="startdocking()" /> without &nbsp;&nbsp;&nbsp;minimization
</center>
            <br><br>
            <h3>Ligands:</h3>
            <span id="docking"></span>
            <br><br>Click and drag the selected ligand to move it. Alt+drag rotates it.
            <br> <br>
            
            <!-- input type="button" value="Update Contacts" onClick="updateContacts()"/ -->

            <br><br><br>PDB ID 
            <script type="text/javascript">
              document.write("<a href=" + document.location.href.split("?")[0] + "?" + practicePdb + ">" + practicePdb + "</a> is good for practicing docking. ")
            </script>
</div>
<div id="left_style" style="display:none">
            <h1><span id="left_style_header"></span></h1>
              <table>
                <tr>
                  <td>
<center>
                    <script type="text/javascript">
                      _jmol.buttonCssText="style='width:100'"
                      jmolButton([doButton,"Color CPK"],"Color CPK","cpk")
                      jmolButton([doButton,"Color Amino"],"Color Amino","amino")
                      jmolBr()
                      jmolButton([doButton,"Color Structure"],"Color Structure","structure")
                      jmolButton([doButton,"Cartoons Only"],"Cartoons Only","co")
                      jmolBr()
                      jmolButton([doButton,"spacefill only;spacefill 23%;wireframe 0.15"],"Ball&Stick","bs")
                      jmolButton([doButton,"wireframe -.1"],"Wireframe Only","wf")
                      jmolBr()
                    </script>
                    <input type="button" value="Focus on Selected" onclick="focusselection()" id="focusselection"/>
                    <input type="button" value="Display All" onclick="jmolScript('display all;zoom {visible} 0')"/>
                    <span id="zshade">
                      <input type="button" value="Fade On" onclick="zshadeon()"/>
                    </span>
</center>

                  </td>
                </tr>
                <tr>
                  <td align=left>
                    <span id="rightboxes">
                    </span>
                  </td>
                </tr>
              </table>

</div>
            </td>  
            <td>
              <table>
                <tr>
                  <td align="center">
                    <script type="text/javascript">addApplet()</script>
                  </td>
                </tr>
                <tr>
                  <td align="center">
                      <script type="text/javascript">
                        _jmol.buttonCssText="style='width:100'"
                        jmolButton("console")
                        jmolCommandInput()
                      </script>
                    </td>
                </tr>
              </table>
            </td>
            <td>
                      <script type="text/javascript">
                        _jmol.buttonCssText="style='width:185'" 
                        jmolBr()
                        jmolButton("load ?","Load FILE")
                        jmolBr()
                        jmolButton([loadPdb], "Load PDB ID")
                        jmolBr()
                        jmolButton("write IMAGE ?.png","Save PNG")
                      </script>

            </td>
          </tr>
        </tbody>
      </table>
    </center>
  </body>
</html>