<!DOCTYPE html>
<html>
<head>
<title>Jmol SMILES Correlation Demo</title>
<meta charset="utf-8" />
<script type="text/javascript" src="JSmol.min.js"></script>
<script type="text/javascript" src="js/JSmolJME.js"></script>
<script type="text/javascript" language="javascript" src="jsme/jsme/jsme.nocache.js"></script>

<script type="text/javascript">

// Bob Hanson hansonr@stolaf.edu 2020.11.22

var jmol1="jmol1";
var jmol2="jmol2";
var jme = "jme";

var Jmol1Info = {
	width: 300,
	height: 300,
	debug: false,
	color: "black",
	use: "HTML5",
  addSelectionOptions: true,
	serverURL: "https://chemapps.stolaf.edu/jmol/jsmol/php/jsmol.php",
  disableJ2SLoadMonitor: true,
  disableInitialConsole: true,
  jarPath: "java",
	jarFile: "JmolAppletSigned.jar",
  j2sPath: "j2s",
	isSigned: true,
  //defaultModel: ":morphine",
	script: "set loadStructCallback 'loadCallback';set picking on; set pickcallback 'pickCallback';set antialiasdisplay;"
}

var Jmol2Info = {...Jmol1Info}

var JMEInfo = {     
	use: "HTML5"
  ,visible: true
  ,divId: "jmediv"
  ,options : "autoez;nocanonize"
	//,jarPath: "jme",
	//,jarFile: "JME.jar"
  //optional parameters
  //,"jme" : startingStructure   
}

function loadCallback(app,b,c,d) {
  if (c == "zapped")return;
  var q1 = $("#jmol1_query").val();
  var q2 = $("#jmol2_query").val();
  var q = (app == "jmol1" ? q1 : q2);
  if (q1 != q2 && q) {
	Jmol.search((app == "jmol1" ? jmol2 : jmol1), q);
	return;
  } 
  setTimeout(function() {showSmiles(false)},1000)
}

function pickCallback(app,label,index) {
 var source = (app == "jmol1" ? 1 : 2);
 for (var i = 0; i < match.length; i++) {
  if (match[i][source] == index + 1) {
    doPick(i);
    break;
  }
 }
}
        
function showSmiles(from3d) {
  $("#ncismiles").html(jmol1._getSmiles("/opensmiles/"));
  $("#pcsmiles").html(jmol2._getSmiles("/opensmiles/"));
  $("#jsmesmiles").html(jme._getSmiles());
  $("#jmolsmiles").html(Jmol.evaluateVar(jmol1,"show('smiles/hydrogen')"));
  createTable();
}


function createTable() {

  listMatch(null);
  
  smiles = Jmol.evaluateVar(jmol1,"show('smiles/hydrogen')");
  compare1 = Jmol.evaluateVar(jmol1,"{*}.find('"+smiles+"','map')")[0];
  compare2 = Jmol.evaluateVar(jmol2,"{*}.find('"+smiles+"','map')")[0];
  labels1 = Jmol.evaluateVar(jmol1,"{*}.label('%a')");
  labels2 = Jmol.evaluateVar(jmol2,"{*}.label('%a')");

  if (!compare1 || !compare2)return;

  ref = [];
  match = [];
  for (var i = 0; i < compare1.length; i++) {
	ref.push(i);
	var a1 = compare1[i];
	var a2 = compare2[i];
	match.push([i + 1,a1+1,a2+1, labels1[a1], labels2[a2]]);
 }
 
$("#test").html([smiles,"c1=",compare1,"c2=",compare2,"match=" + match])
  
 listMatch(match);
}

function listMatch(match) {
  var s = "<table>";
if (match) {
  for (var i = 0; i < match.length; i+= 20) {
  s += "<tr><td>ref</td><td><a href=javascript:doSort(0)>sort</a></td>" + list(match,0, null, i, i + 20)
  s += "</tr><tr><td>NCI/CADD</td><td><a href=javascript:doSort(1)>sort</a></td>" + list(match,1,jmol1, i, i + 20)
  s += "</tr><tr><td>PubChem</td><td><a href=javascript:doSort(2)>sort</a></td>" + list(match,2,jmol2, i, i + 20)
  s += "</tr><tr><td></td></tr>";
  }
}
  s += "</table>"

  $("#table").html(s);


}

function doSort(source) {

  match.sort(function(a,b) { return(a[source] < b[source] ? -1 : a[source] > b[source] ? 1 : 0);});

  listMatch(match);

}

function list(a,source,app, i0, i1) {
  i1 = Math.min(i1, a.length);
  var s = "";
  var bgd = ["lightblue","lightgreen"]
  for (var i = i0; i < i1; i++) {
     var label = (source ? a[i][source + 2] : a[i][0]);
     s += "<td align=center width=20 style='background:"+bgd[i%2]+"'><a style='text-decoration:none' href='javascript:doPick(" + i + ")'>" + label + "</a></td>";
  }
  return s;
}

function doPick(i) {
    Jmol.script(jmol1, "select on @" + match[i][1] +";set echo bottom left;echo " + match[i][3]);
    Jmol.script(jmol2, "select on @" + match[i][2] +";set echo bottom left;echo " + match[i][4]);
}


function doTest() {
       $("#jmol1_query").val("");
       $("#jmol2_query").val("");
	var smiles = jme._getSmiles();
	alert("This page will now request " + smiles + " from NCI/CADD and PubChem. Stand by.")
	Jmol.script(jmol1, "echo off;zap;load $"+smiles);
	Jmol.script(jmol2, "echo off;zap;load :SMILES:"+smiles);

}

function doShowFile(app) {
   Jmol.script(app, "write file " + (app == jmol1 ? "nci.mol" : "pubchem.mol"));
}

</script>
</head>
<body>
This page demonstrates how you can use Jmol to map the atom numbering of one model to another using <a target=_blank href=https://jcheminf.biomedcentral.com/articles/10.1186/s13321-016-0160-4>Jmol SMILES</a>. 
<br>We use NCI/CADD and PubChem as examples of two different sources. Search for a structure such as <b>tylenol</b>, then pick an atom or table entry. 
<br>You can also draw a structure using JSME and press <b>test</b>. Or, you could provide two structures of your own by drag-dropping them into the two applets. 
<br>Realize that PubChem only has compounds deposited to it. It will fail to load a compound it doesn't have in its database.
<table width=1000>
<tr><td width=400 align=center >NCI/CADD
</td><td width=400 align=center >JSME
</td><td width=400 align=center >PubChem
</td></tr>
<tr><td width=400 align=center >
<script>
Jmol.setGrabberOptions([["$", "NCI"]])
jmol1 = Jmol.getApplet(jmol1, Jmol1Info)
</script>
<button onclick="doShowFile(jmol1)">File</button>

</td>
<td width=400 align=center>
<div id="jmediv" style="position:relative;width:350px;height:300px;"></div>
<br>
<button onclick="doTest()">test</button>
</td>
<td width=400 align=center >

<script>
Jmol.setGrabberOptions([[":", "PubChem"]])
jmol2 = Jmol.getApplet(jmol2, Jmol2Info)
</script>
<button onclick="doShowFile(jmol2)">File</button>
</td>
</tr>
<tr>
<td colspan=10>
<span id="table"></span>
</td>
</tr>
<tr>
<td>
NCI SMILES:<br> <div  style="width:400px;overflow-wrap:anywhere" id="ncismiles"></div>
</td>
<td>
JSME SMILES:<br> <div style="width:400px;overflow-wrap:anywhere" id="jsmesmiles"></div>
</td>
<td>
PubChem SMILES:<br> <div style="width:400px;overflow-wrap:anywhere"  id="pcsmiles"></div>
</td>
</tr>
<tr>
<td colspan=10>
Jmol fully elaborated SMILES: <div style="width:800px;overflow-wrap:anywhere" id="jmolsmiles">Jmol SMILES</div>
</td>
</tr>
</table>
<br>
<br>
<b>How It Works</b>
<br><br>
<div style="width:600px">
When a structure is loaded via the JSME test button, the page queries JSME for the SMILES of the
drawn compound. This SMILES is passed to NCI/CADD and PubCHEM using Jmol's LOAD command. 
The page gets a callback to loadCallback() anytime a structure is loaded and requests from 
the NCI applet its compound's <b>fully elaborated SMILES</b>, evaluating in Jmol <b>show('smiles/hydrogen')</b>. 
This SMILES is unusual, as it includes every hydrogen atom and indicates "chirality" even at CH3 and CH2 positions.
<br>
<br>
JSmol then queries both applets for a match to that SMILES using <b>{*}.find(smiles,'map')</b>. 
The result is a zero-based array of atom indices that match every atom in the SMILES. 
This atom correlation map can then be used to match atoms in one structure to atoms in the other structure. 
<br>
<br>
</div>
<span style="display:none" id="test"></span>
<script>
jme = Jmol.getJMEApplet(jme, JMEInfo);
</script>

</body>
</html>
