<!DOCTYPE html>
<html>
<head>
	<title>JSmol -- platform-aware Jmol using jQuery</title>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

<script type="text/javascript" src="JSmol.min.js"></script>

<script type="text/javascript">

// author: Bob Hanson hansonr@stolaf.edu 2021.11.10

var defaultModel = "$PF5";

var s = unescape(document.location.search);
var defaultDisplay = ';set antialiasdisplay;set measurementUnits angstroms;set zoomlarge false;'


function loadCallback(app,from) {
  doClear();
}


var script = 'set errorCallback "myCallback"; set loadStructCallback "loadCallback";'
	+ defaultDisplay
	+'set echo top left;echo loading XXXX...;refresh;'
	+'load ":XXXX";set echo top center;echo XXXX;'
var xxxx = s.split("_USE=")[0]
if (xxxx.length < 2) {
  xxxx = defaultModel;
} else {
  xxxx = xxxx.substring(1);
  if (xxxx.indexOf("load ") >= 0) {
    script = xxxx 	+ defaultDisplay

    xxxx = ""
  }
}
if (xxxx)
  script = script.replace(/XXXX/g, xxxx).replace("echo $","echo ").replace(":$", "$");

var Info = {
	width: 450,
	height: 450,
	script: script,
	use: "HTML5",
	jarPath: "java",
	j2sPath: "j2s",
	jarFile: "JmolAppletSigned.jar",
	isSigned: false,
	addSelectionOptions: false,
	serverURL: "https://chemapps.stolaf.edu/jmol/jsmol/php/jsmol.php",
	readyFunction: null,
	console: "jmol_infodiv",
	disableInitialConsole: true,
	defaultModel: null,
	debug: false
}

	// this next bit just allows us to see what platform we are on
	// based on our decisions indicated in Info

	// "true" here indicates just a check

	Jmol.getApplet("appletCheck", Info, true);
	var isApplet = (appletCheck._jmolType.indexOf("_Applet") >= 0);
	var is2D = appletCheck._is2D;

	if (!isApplet && !Info.script) {

		// JSmol or image

		Info.defaultModel = "$SF4";
		Info.script = "#alt:LOAD :cyclohexane";

	}


///////////////////////////////////////////////////////// point group test code ////////////////////////////////

var thisOp = "";
var thisN = -1;
var thisType = "";
var thisOps = [];
var thisList = [];
var thisFound = 0;


doClear = function() {
  $("#symops").html("");
  thisOps = [];
  thisN = -1;
  thisOp = "";
  thisList = [];
  thisKey = [];
  setSelect();
}

setSelect = function() {
  Jmol.script(jmol, "select none; select on; set picking atoms;echo");
}


doElement = function(op) {
  thisOp = op;
  thisN = (op == "Ci" ? 2 : op == "Cs" ? 2 : +op.substring(1));
  thisType = (op == "Ci" ? "inversion center" : op == "Cs" ? "plane" : op.startsWith("C") ? "rotation" : "improper rotation"); 
  addOp();
  setSelect();
}

addOp = function() {
  thisSet = Jmol.evaluateVar(jmol,"{selected}");
  if (thisSet.length != thisN) {
    alert(thisN == -1 ? "First pick a symmetry element." : "You need to pick " + thisN + " atoms");
    return;
  }
  var key = ";"+thisOp+thisSet+";"
  if (thisKey.join("").indexOf(key) >= 0) {
    alert("You have already added this symmetry element.");
    return;
  }
  thisOps.push({op:thisOp, n:thisN, type:thisType, atoms:thisSet}); 
  setList(key);
}

setList = function() {
  thisList = [];
  thisKey = [];
  for (var i = 0; i < thisOps.length; i++) {
    var op = thisOps[i];
    thisKey.push(";" + op.op + op.atoms +";");
    thisList.push([thisList.length + 1,op.op, op.n, op.type, op.atoms, " <button onclick=doRemoveOp(" + thisList.length + ")>remove</button>"]);
  }
  $("#symops").html(thisList.join("<br>"));
  Jmol.script(jmol, "select none");
}

doRemoveOp = function(i) {
  thisOps.splice(i,1);
  thisList.splice(i,1);
  setList();
  Jmol.script(jmol, "draw delete");
}

doCheck = function() {
  var pg = Jmol.evaluateVar(jmol, "getproperty('pointgroupInfo')");
  var nTotal = pg.nCi + pg.nCs + pg.nCn + pg.nSn; 
  var center = pg.center || pg.Ci || Jmol.evaluateVariable("all.xyz");
  Jmol.script(jmol, "draw delete;select *;select off");
  var script = "";
  var minv = "[[-1, 0, 0], [0, -1, 0], [0, 0, -1]]";
  var nFound = 0;
  for (var i = 0; i < thisOps.length; i++) {
    // for each of the selected operations and atom subsets
    var op = thisOps[i];
    thisOp = op.op;
    thisN = op.n;
    thisType = op.type;
    thisAtoms = op.atoms;
    var pgops = pg[thisOp];
    if (thisOp == "Ci") pgops = [pgops]; 
    if (!pgops) {
      alert(op + " does not exist in this point group");
      return;
    }
    var c = "{" + center.join(" ") + "}";
    var atoms = [];
    for (var j = 0; j < thisAtoms.length; j++) {
      var a = "{" + Jmol.evaluateVar(jmol, "{atomindex=" + thisAtoms[j] + "}.xyz - " + c).join(' ') + "}";
      atoms.push(a);
    }
    var opFound = false;
    var ir = 0;
    for (var p = 0; p < pgops.length; p++) {
     // for each of the molecular symmetry elements nC2, mC3, etc.
     var pgop = pgops[p];
     var v = minv;
     var theta = 360 / thisN;
     switch (thisType) {
     case "inversion center":
      theta = 0;
      break;
     case "plane":
      break;
     case "rotation":
      v = "";
      break;
     case "improper rotation":
      theta += 180;
      // S3 = (Cn+180)*inv = 360/n + 180
      break;
     }
     v = (theta = 0 ? "" : "(quaternion([" + pgop + "]," + theta +")%'matrix')") + (v ? ".mul("+v+")" : "");
//console.log("v=" + v);
     var m = Jmol.evaluateVar(jmol, v);
     m = "[[" + m[0] + "][" + m[1] + "][" + m[2] + "]]";
     if (isOp(m, atoms)) {
        var s = "draw pointgroup " + thisOp + (thisOp == "Ci" ? "" : " " + (p + 1)) + " scale 1.5";
      	Jmol.script(jmol, s);
        opFound = true;
        nFound++;
     }	
   }
   if (!opFound) {
     alert((i+1) + " " + thisOp + " was not found");
     break;
   }
  }  
  setSelect();
  if (nFound == nTotal) {
    alert("You found them all!")
  } else {
    alert((nFound > 0 ? "Good! " : "") + (nTotal - nFound) + " more to go...");
  }
}

function isOp(m, atoms) {
  // check to see that every atom has an associated atom 
  var nAtoms = atoms.length;
  var nOK = 0;
  var xyz = [];
  for (var i = 0; i < nAtoms; i++) {
    for (var j = 0; j < nAtoms; j++) {
       if (j == i) continue;
       var v = m + ".mul(" +atoms[i] + ").distance(" + atoms[j] +")";
       var test = Jmol.evaluateVar(jmol, v);

//console.log("isOp " + i + "/" + j + "=" + test + " " + v);

       if (test < 0.01) {
          nOK++;
	  break;
       }
    }
  }
  return (nOK == nAtoms);

}


doShowPG = function()  {
  var pg = Jmol.evaluateVar(jmol, "show('pointgroup')");
  var name = Jmol.evaluateVar(jmol, "getproperty('pointgroupInfo.name')");
  Jmol.script(jmol, "draw pointgroup scale 1.5;set echo top left; echo "+ name);
  alert(pg);
}


// The actual applet will be jmol._applet (if it turns out to be an actual Applet),
// but we will never access that directly.

$(document).ready(function(){	
  
  $("#middlepanel").html(Jmol.getAppletHtml("jmol", Info));
	var controls = "\
<div style='width:300px'>\
<h3>Point Group Test</h3>\
1. Pick a set of atoms that are related by a symmetry operation.\
<br><br>\
2. Select the symmetry element that relates these atoms:<br>\
<blockquote>\
<input type=radio name=op onclick=doElement('C2')>C<sub>2</sub></input>\
<input type=radio name=op onclick=doElement('C3')>C<sub>3</sub></input>\
<input type=radio name=op onclick=doElement('C4')>C<sub>4</sub></input>\
<input type=radio name=op onclick=doElement('C5')>C<sub>5</sub></input>\
<input type=radio name=op onclick=doElement('C6')>C<sub>6</sub></input>\
<br>\
<input type=radio name=op onclick=doElement('S3')>S<sub>3</sub></input>\
<input type=radio name=op onclick=doElement('S4')>S<sub>4</sub></input>\
<input type=radio name=op onclick=doElement('S6')>S<sub>6</sub></input>\
&nbsp;&nbsp;<input type=radio name=op onclick=doElement('Cs')>&sigma;</input>\
&nbsp;&nbsp;<input type=radio name=op onclick=doElement('Ci')><i>i</i></input>\
</blockquote><br><br>\
<br>\
<div id=symops></div>\
<br><br>\
3. <button onclick=doCheck()>Check Space Group</button>\
<br><br>\
4. <button onclick=doClear()>Clear</button>\
<br><br>\
<button onclick=doShowPG()>I give up -- show me all of them</button>\
</div>"

	$("#leftpanel").html(controls);

  // right panel
  
	Jmol.setButtonCss(null, "style='width:160px'");	
	$("#rightpanel").html(
		Jmol.jmolButton(jmol,"if (!molname) { molname = 'cyclohexane'};var x = prompt('Enter the name or identifier (SMILES, InChI, CAS) of a molecule',molname);if (!x) { quit }; molname = x; load @{'$' + molname} #alt:LOAD $??Enter a model name","Load MOL (NCI)")
		+ "<br>"
		+ Jmol.jmolButton(jmol,"if (!molname) { molname = 'cyclohexane'};var x = prompt('Enter the name of a compound',molname);if (!x) { quit }; molname = x; load @{':' + molname} #alt:LOAD :??Enter a model name","Load MOL (PubChem)")
		+ (isApplet ? 
		"<br>"
		+ Jmol.jmolButton(jmol,(isApplet ? "minimize" : "set forceField UFF;minimize"),"Minimize (MMFF94)")
		: "")
 		+ (isApplet ?
		"<br>"
		+ Jmol.jmolButton(jmol,"load ? ","Load URL")
		+ "<br>"
		+ Jmol.jmolButton(jmol,"load ? ","Load FILE")
		+ "<br>"
		+ Jmol.jmolButton(jmol,"script ?.spt","Load SCRIPT")
		: "")
		+ "<br><br>"
		+ Jmol.jmolButton(jmol,"select *;if ($s1) {isosurface s1 delete} else {calculate partialcharge;isosurface s1 vdw map MEP translucent}","show/hide MEP")
		+ "<br><br>"
		+ (isApplet ?
// no longer works		Jmol.jmolButton(jmol,"show NMR","Predict NMR")
//		+ "<br><br>"
		Jmol.jmolButton(jmol,"write FILE ?","Save FILE")
		+ "<br>"
		+ Jmol.jmolButton(jmol,"write PNGJ jsmol.png","Save PNG")
		+ "<br><br><a href=simple2.htm?_USE=HTML5>HTML5 version</a>"
		+ "<br><br><a href=simple2.htm?_USE=SIGNED>(Signed) Java version</a>"
		+ "<br><br>" + Jmol.jmolLink(jmol, "JSCONSOLE", "show info")
		: 
		"<br><br>"
		+ Jmol.jmolButton(jmol,"write FILE ?","Save FILE")
		+ "<br>"
		+ Jmol.jmolButton(jmol,"write PNGJ jsmol.png","Save PNG")
		+ "<br><br><a href=simple2.htm?_USE=SIGNED>JAVA version</a>"
    + "<br><br><a href=javascript:Jmol.showInfo(jmol,true)>show info</a>"
    )
	);
	
	// lower panel:
			
	Jmol.setButtonCss(null,"style='width:120px'");
	var s = "<br>"
		+ Jmol.jmolButton(jmol,"wireframe -0.1 #alt:SETTING Line", "wireframe")
		+ Jmol.jmolButton(jmol,"spacefill only;spacefill 23%;wireframe 0.15 #alt:SETTING Ball and Stick","ball&stick");
		s += Jmol.jmolButton(jmol,"spacefill #alt:SETTING van der Waals Spheres", "spacefill");	
		Jmol.setButtonCss(null,"style='width:100px'");
	
		s += "<br>"

    s += Jmol.jmolButton(jmol,"console");
		
    s += Jmol.jmolCommandInput(jmol);
    
    
	$("#lowerpanel").html(s);
})

//]]>

</script>
</head>
<body>
<table style="margin-left:auto; margin-right:auto;">
	<tr>
		<td><div id="leftpanel" valign=top></div></td>
		<td><table><tr><td><div id="middlepanel" valign=top></div></td></tr>
		<td style="text-align:center"><div id="lowerpanel"></div></td></tr></table><td>
		<td><div id="rightpanel" valign=top></div></td>
	</tr>
	<tr>
		<td></td>
		<td></td>
	</tr>
</table>
<div id="console"></div>
</body>
</html>