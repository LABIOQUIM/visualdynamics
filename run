#!/bin/bash
SHELL_NAME="${SHELL##*/}"
BLUE='\033[0;34m'
LBLUE='\033[1;34m'
CYAN='\033[0;36m'
LCYAN='\033[1;36m'
NC='\033[0m' # No Color
############################################################
# Help                                                     #
############################################################
Help() {
  # Display Help
  echo -e "${BLUE}How to run VisualDynamics?"
  echo
  echo -e "${NC}Syntax: ./run -{option}"
  echo "options:"
  echo -e "${LBLUE}h     ${NC}Print this Help."
  echo -e "${LBLUE}i     ${NC}Installs (or reinstalls) VisualDynamics."
  echo -e "${LBLUE}m     ${NC}Specify the execution mode (dev|prod|server)."
  echo
}

############################################################
# StartService                                             #
############################################################
StartService() {  
  if [ $1 == 'dev' ] || [ $1 == 'prod' ] || [ $1 == 'server' ]; then
    echo ">> Starting VisualDynamics in $1 mode"
    echo ">> To end the server press Ctrl + C"
  fi

  eval "$(/home/$USER/.conda/bin/conda shell.$SHELL_NAME hook)"
  conda activate visualdynamics
  source config

  if [ $1 == 'dev' ]; then
    export FLASK_ENV=development
    flask run --host=0.0.0.0
  elif [ $1 == 'prod' ]; then
    echo ">> Staring server on http://0.0.0.0:8080"
    python3 visualdynamics.py
  elif [ $1 == 'server' ]; then
    export FLASK_ENV=production
    flask run --host=0.0.0.0 --port=8080
  else
    echo "Invalid Start Mode: $1"
  fi
}

############################################################
# InstallService                                           #
############################################################
InstallService() {
  export PIP_IGNORE_INSTALLED=0

  echo -e "BEWARE. All data stored in the ${CYAN}app/app.db ${NC}will be lost."
  echo -e "${LCYAN}This is a automated process mainly, you might need to enter your password by continuing"
  read -rsn1 -p "Do you wish to continue? (Y/n) " resp
  resp=${resp:-Y}

  if [ $resp = 'Y' ] || [ $resp = 'y' ]; then
    echo -e "${NC}"
    chmod +x ./scripts/config.sh
    source ./scripts/config.sh
    source config
    echo
    if type "conda" &> /dev/null
    then
      echo -e "${LCYAN}Miniconda found${NC}, skipping..."
    else
      echo -e "${CYAN}Installing Miniconda"
      echo "Miniconda will be installed on $HOME/.conda/"
      echo -e "It is highly recommended that you accept to run ${LCYAN}'conda init'${CYAN}"
      echo "at the end of the miniconda install. If you forgot, you can"
      echo -e "run ${LCYAN}'$HOME/.conda/bin/activate'${CYAN} and then run ${LCYAN}'conda init'${CYAN}"
      curl https://repo.anaconda.com/miniconda/Miniconda3-py39_4.12.0-Linux-x86_64.sh > miniconda.sh
      chmod +x miniconda.sh
      bash miniconda.sh -b -p $HOME/.conda
    fi

    if [ -f "/etc/arch-release" ]; then
      chmod +x ./scripts/arch-steps.sh
      source ./scripts/arch-steps.sh
    else
      chmod +x ./scripts/debian-steps.sh
      source ./scripts/debian-steps.sh
    fi

    echo -e ">>> ${CYAN}Initializing Environment and Dependencies${NC}"
    eval "$(/home/$USER/.conda/bin/conda shell.$SHELL_NAME hook)"
    # Init and install Conda and Project Dependencies
    conda env create -f ./environment.yml
    conda activate visualdynamics
    echo -e ">>> ${LCYAN}Environment and Dependencies Initialized${NC}"

    echo -e ">>> ${LCYAN}Resetting database${NC}"
    # Clear our SQLite DB
    python3 clear_database.py
    echo -e ">>> ${LCYAN}Database resetted${NC}"

    echo -e ">>> ${LCYAN}Validating GROMACS${NC}"
    chmod +x ./scripts/gromacs.sh
    source ./scripts/gromacs.sh
    echo -e ">>> ${LCYAN}GROMACS Validated${NC}"

    # Compile our app translations
    echo -e ">>> ${LCYAN}Readying translations${NC}"
    flask translate compile > /dev/null
    echo -e ">>> ${LCYAN}Translations ready${NC}"

    echo -e ">>> ${LCYAN}Finishing things up...${NC}"
    # Make sure our DB and our md_pr file don't go to VCS
    git update-index --assume-unchanged app/app.db mdpfiles/md_pr.mdp

    # Make our app starters executable
    chmod +x run

    echo -e "${CYAN}VisualDynamics ${NC}is now ready. See ${LCYAN}./run -h${NC} to start the application"  
  elif [ $resp = 'n' ]; then
    echo "Installation Cancelled by User"
  else
    echo "Invalid Option"
  fi
}

############################################################
# Main program                                             #
############################################################
while getopts ":him:" option; do
  case $option in
    h) # display Help
      Help
      exit;;
    i)
      InstallService;;
    m) # start the application in the selected mode
      StartService "$OPTARG";;
    \?) # Invalid option
      echo "Error: Invalid option"
      exit;;
  esac
done

